version: "3.4"
services:
    fpm:
      build: ./docker/fpm/7.4/
      volumes:
        - './magento/:/var/www/html/magento2/'
      environment:
        UPDATE_UID_GID: '${UPDATE_UID_GID:-false}'
      ports:
        - 9000
      networks:
        - 'magento'
    
    cli:
      build: ./docker/cli/7.4/
      depends_on:
        - 'mysql'
      volumes:
        - ~/.composer:/root/.composer:cached
        - ~/.composer:/var/www/.composer:cached
        - ./magento/:/var/www/html/magento2/:cached
        - ./log/:/var/www/log/:delegated
      environment:
        UPDATE_UID_GID: '${UPDATE_UID_GID:-false}'
        M2SETUP_INSTALL_DB: 0
        M2SETUP_DB_HOST: '${APP_DATABASE_HOST}'
        M2SETUP_DB_NAME: '${APP_DATABASE_NAME}'
        M2SETUP_DB_USER: '${APP_DATABASE_USER}'
        M2SETUP_DB_PASSWORD: '${APP_DATABASE_PASSWORD}'
        M2SETUP_BASE_URL: 'http://magento2.docker/'
        # - M2SETUP_SECURE_BASE_URL: https://magento2.docker/
        M2SETUP_BACKEND_FRONTNAME: 'adomindesu'
        M2SETUP_ADMIN_FIRSTNAME: 'Admin'
        M2SETUP_ADMIN_LASTNAME: 'User'
        M2SETUP_ADMIN_EMAIL: 'dummy@gmail.com'
        M2SETUP_ADMIN_USER: 'admin'
        M2SETUP_ADMIN_PASSWORD: 'Admin@123'
        M2SETUP_VERSION: '2.3.*'
        # - M2SETUP_USE_SAMPLE_DATA: 'true'
      networks:
        - 'magento'  

    cron:
      build: ./docker/cli/7.4/
      depends_on:
      - 'mysql'
      command: run-cron
      environment:
        ENABLE_SENDMAIL: 'true'
        UPDATE_UID_GID: '${UPDATE_UID_GID:-false}'
      volumes:
        - ~/.composer/cache:/root/.composer/cache:cached
        - ./magento/:/var/www/html/magento2/:cached
        - ./log/:/var/www/log/:delegated
      networks:
        - 'magento' 
  
    # httpd:
    #   image: 'httpd:2.4'
    #   depends_on:
    #     - 'fpm'
    #     - 'mysql'
    #   ports:
    #     - '80:80'
    #     - '443:443'
    #   volumes:
    #     - './magento/:/var/www/html/magento2/'
    #     - './docker/httpd/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro'
    #     - './docker/httpd/magento2.conf:/usr/local/apache2/conf/vhost.conf:ro'
    #     - './docker/httpd/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro'
    #     - './log/:/var/www/log/'
    #     - '~/ssl.key:/usr/local/apache2/conf/server.key'
    #     - '~/ssl.crt:/usr/local/apache2/conf/server.crt'
    #   networks:
    #     - 'magento'

    nginx:
      #image: nginx:1.19.4
      build: ./docker/nginx
      depends_on:
        - 'fpm'
        - 'mysql'
      ports:
        - '80:80'
        - '443:443'
      environment:
        FQDN: '${FQDN:-"localhost"}'
      volumes:
        - ./magento/:/var/www/html/magento2/:cached
        - ./log/:/var/log/nginx/:delegated
        - ~/ssl.key:/etc/nginx/ssl/magento.key:cached
        - ~/ssl.crt:/etc/nginx/ssl/magento.crt:cached
      networks:
        - 'magento'

    redis:
      image: 'redis:5.0'
      networks:
        - 'magento'

    # mysql:
    #   image: 'mysql:8.0.18'
    #   command: '--default-authentication-plugin=mysql_native_password'
    #   environment:
    #     MYSQL_ROOT_PASSWORD: 'root'
    #     MYSQL_USER: '${APP_DATABASE_USER}'
    #     MYSQL_DATABASE: '${APP_DATABASE_NAME}'
    #     MYSQL_PASSWORD: '${APP_DATABASE_PASSWORD}'
    #   volumes:
    #     - dbdata:/var/lib/mysql
    #   ports:
    #     - '${DOCKER_PORT_MYSQL:-33066}:3306'
    #   networks:
    #     - 'magento'
  
    mysql:
      image: 'mysql:8.0.18'
      command: 
        - '--default-authentication-plugin=mysql_native_password'
        - '--log-bin-trust-function-creators=1'
      environment:
        MYSQL_ROOT_PASSWORD: 'root'
        MYSQL_USER: '${APP_DATABASE_USER}'
        MYSQL_DATABASE: '${APP_DATABASE_NAME}'
        MYSQL_PASSWORD: '${APP_DATABASE_PASSWORD}'
      volumes:
        #- './docker/database/db-dump:/docker-entrypoint-initdb.d'
        - dbdata:/var/lib/mysql
      ports:
        - '${DOCKER_PORT_MYSQL:-33006}:3306'
      networks:
        - 'magento'
    
    # mysql:
    #   image: 'mysql:5.7.32'
    #   environment:
    #     MYSQL_ROOT_PASSWORD: 'root'
    #     MYSQL_USER: '${APP_DATABASE_USER}'
    #     MYSQL_DATABASE: '${APP_DATABASE_NAME}'
    #     MYSQL_PASSWORD: '${APP_DATABASE_PASSWORD}'
    #   volumes:
    #     - './docker/database/db-dump:/docker-entrypoint-initdb.d'
    #   ports:
    #     - '${DOCKER_PORT_MYSQL:-33006}:3306'
    #   networks:
    #     - 'magento'

    elasticsearch:
      image: 'docker.elastic.co/elasticsearch/elasticsearch-oss:7.5.1'
      environment:
        ES_JAVA_OPTS: '${ES_JAVA_OPTS:--Xms512m -Xmx512m}'
        discovery.type: 'single-node'
      ports:
        - '${DOCKER_PORT_ELASTICSEARCH:-9210}:9200'
      networks:
        - 'magento'

    # elasticsearch:
    #   image: 'docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.13'
    #   environment:
    #     ES_JAVA_OPTS: '${ES_JAVA_OPTS:--Xms512m -Xmx512m}'
    #     discovery.type: 'single-node'
    #   ports:
    #     - '${DOCKER_PORT_ELASTICSEARCH:-9210}:9200'
    #   networks:
    #     - 'magento'
    #appdata:
    #  image: tianon/true
    #  volumes:
    #    - ./magento:/var/www/html/magento2
    #    - mediaData:/var/www/html/magento2/pub/media.bak  

volumes:
  dbdata:

networks:
  magento:

# httpd
# php
# cron
# redis
# elasticsearch
# nginx
# varnish
# database

  # varnish:
  #   image: meanbee/magento2-varnish:latest
  #   environment:
  #     - VIRTUAL_HOST=magento2.docker
  #     - VIRTUAL_PORT=80
  #     - HTTPS_METHOD=noredirect
  #   ports:
  #     - 80
  #   links:
  #     - web

  # web:
  #   image: meanbee/magento2-nginx:1.9
  #   ports:
  #     - 80
  #   links:
  #     - fpm
  #     - db
  #   volumes_from:
  #     - appdata
  #   env_file:
  #     - ./global.env
  #   #environment:
  #     #- VIRTUAL_HOST=magento2.docker
  #     #- VIRTUAL_PORT=80
  #     #- HTTPS_METHOD=noredirect

  # fpm:
  #   hostname: fpm.magento2.docker
  #   image: meanbee/magento2-php:7.0-fpm
  #   ports:
  #     - 9000
  #   links:
  #     - db
  #   volumes_from:
  #     - appdata
  #   env_file:
  #     - ./global.env

  # db:
  #   image: mariadb:10
  #   ports:
  #     - 3306
  #   volumes_from:
  #     - dbdata
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=magento2
  #     - MYSQL_DATABASE=magento2
  #     - MYSQL_USER=magento2
  #     - MYSQL_PASSWORD=magento2
  #     - TERM=meh

  # cli:
  #   hostname: cli.magento2.docker
  #   image: meanbee/magento2-php:7.0-cli
  #   links:
  #     - db
  #   volumes:
  #     - ~/.composer/cache:/root/.composer/cache
  #   volumes_from:
  #     - appdata
  #   env_file:
  #     - ./global.env
  #     - ./composer.env
  #   environment:
  #     - M2SETUP_INSTALL_DB=true
  #     - M2SETUP_DB_HOST=db
  #     - M2SETUP_DB_NAME=magento2
  #     - M2SETUP_DB_USER=magento2
  #     - M2SETUP_DB_PASSWORD=magento2
  #     - M2SETUP_BASE_URL=http://magento2.docker/
  #     # - M2SETUP_SECURE_BASE_URL=https://magento2.docker/
  #     - M2SETUP_BACKEND_FRONTNAME=admin
  #     - M2SETUP_ADMIN_FIRSTNAME=Admin
  #     - M2SETUP_ADMIN_LASTNAME=User
  #     - M2SETUP_ADMIN_EMAIL=dummy@gmail.com
  #     - M2SETUP_ADMIN_USER=admin
  #     - M2SETUP_ADMIN_PASSWORD=password1
  #     - M2SETUP_VERSION=2.1.*
  #     # - M2SETUP_USE_SAMPLE_DATA=true

  # cron:
  #   image: meanbee/magento2-php:7.0-cli
  #   hostname: magento2-cron.docker
  #   command: run-cron
  #   env_file:
  #     - ./global.env    
  #   environment:
  #     - ENABLE_SENDMAIL=true
  #   volumes_from:
  #     - appdata
  #   links:
  #     - db



  # dbdata:
  #   image: tianon/true
  #   volumes:
  #     - /var/lib/mysql
